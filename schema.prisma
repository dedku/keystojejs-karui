// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Blog {
  id          String  @id @default(cuid())
  title       String  @default("")
  cardAvatar  Json?
  coverPhoto  Json?
  slug        String  @unique @default("")
  views       String  @default("1")
  renderedDoc String  @default("")
  status      String? @default("draft")
  content     Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author      User?   @relation("Blog_author", fields: [authorId], references: [id])
  authorId    String? @map("author")
  tags        Tag[]   @relation("Blog_tags")

  @@index([authorId])
}

model Build {
  id          String  @id @default(cuid())
  title       String  @default("")
  class       Class?  @relation("Build_class", fields: [classId], references: [id])
  classId     String? @map("class")
  slug        String  @unique @default("")
  renderedDoc String  @default("")
  views       String  @default("1")
  skill       String  @default("")
  patch       String  @default("")
  status      String? @default("draft")
  content     Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author      User?   @relation("Build_author", fields: [authorId], references: [id])
  authorId    String? @map("author")
  tags        Tag[]   @relation("Build_tags")

  @@index([classId])
  @@index([authorId])
}

model User {
  id       String  @id @default(cuid())
  name     String  @default("")
  email    String  @unique @default("")
  slug     String  @default("")
  image    Json?
  isAdmin  Boolean @default(false)
  password String
  blogs    Blog[]  @relation("Blog_author")
  builds   Build[] @relation("Build_author")
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @default("")
  color  String  @default("")
  blogs  Blog[]  @relation("Blog_tags")
  builds Build[] @relation("Build_tags")
}

model Class {
  id     String  @id @default(cuid())
  name   String  @default("")
  image  Json?
  builds Build[] @relation("Build_class")
}

model PostCategory {
  id       String        @id @default(cuid())
  name     String        @default("")
  icon     String        @default("")
  subtitle String        @default("")
  status   String?       @default("draft")
  content  PostContent[] @relation("PostContent_category")
}

model PostContent {
  id         String        @id @default(cuid())
  name       String        @default("")
  status     String?       @default("draft")
  content    Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  category   PostCategory? @relation("PostContent_category", fields: [categoryId], references: [id])
  categoryId String?       @map("category")

  @@index([categoryId])
}