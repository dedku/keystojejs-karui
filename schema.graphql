# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Blog {
  id: ID!
  title: String
  cardAvatar: ImageFieldOutput
  coverPhoto: ImageFieldOutput
  slug: String
  views: String
  renderedDoc: String
  status: String
  content: Blog_content_Document
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Blog_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BlogWhereUniqueInput {
  id: ID
  slug: String
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  views: StringFilter
  renderedDoc: StringFilter
  status: StringNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input BlogOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  views: OrderDirection
  renderedDoc: OrderDirection
  status: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input BlogUpdateInput {
  title: String
  cardAvatar: ImageFieldInput
  coverPhoto: ImageFieldInput
  slug: String
  views: String
  renderedDoc: String
  status: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input BlogUpdateArgs {
  where: BlogWhereUniqueInput!
  data: BlogUpdateInput!
}

input BlogCreateInput {
  title: String
  cardAvatar: ImageFieldInput
  coverPhoto: ImageFieldInput
  slug: String
  views: String
  renderedDoc: String
  status: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Build {
  id: ID!
  title: String
  class: Class
  slug: String
  renderedDoc: String
  views: String
  skill: String
  patch: String
  status: String
  content: Build_content_Document
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Build_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BuildWhereUniqueInput {
  id: ID
  slug: String
}

input BuildWhereInput {
  AND: [BuildWhereInput!]
  OR: [BuildWhereInput!]
  NOT: [BuildWhereInput!]
  id: IDFilter
  title: StringFilter
  class: ClassWhereInput
  slug: StringFilter
  renderedDoc: StringFilter
  views: StringFilter
  skill: StringFilter
  patch: StringFilter
  status: StringNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input BuildOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  renderedDoc: OrderDirection
  views: OrderDirection
  skill: OrderDirection
  patch: OrderDirection
  status: OrderDirection
}

input BuildUpdateInput {
  title: String
  class: ClassRelateToOneForUpdateInput
  slug: String
  renderedDoc: String
  views: String
  skill: String
  patch: String
  status: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input BuildUpdateArgs {
  where: BuildWhereUniqueInput!
  data: BuildUpdateInput!
}

input BuildCreateInput {
  title: String
  class: ClassRelateToOneForCreateInput
  slug: String
  renderedDoc: String
  views: String
  skill: String
  patch: String
  status: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  slug: String
  ytID: String
  twitchID: String
  twitchUsername: String
  ytVideosID: JSON
  image: ImageFieldOutput
  isAdmin: Boolean
  isOnline: Boolean
  password: PasswordState
  blogs(
    where: BlogWhereInput! = {}
    orderBy: [BlogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Blog!]
  blogsCount(where: BlogWhereInput! = {}): Int
  builds(
    where: BuildWhereInput! = {}
    orderBy: [BuildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Build!]
  buildsCount(where: BuildWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  slug: StringFilter
  ytID: StringFilter
  twitchID: StringFilter
  twitchUsername: StringFilter
  isAdmin: BooleanFilter
  isOnline: BooleanFilter
  blogs: BlogManyRelationFilter
  builds: BuildManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BlogManyRelationFilter {
  every: BlogWhereInput
  some: BlogWhereInput
  none: BlogWhereInput
}

input BuildManyRelationFilter {
  every: BuildWhereInput
  some: BuildWhereInput
  none: BuildWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  slug: OrderDirection
  ytID: OrderDirection
  twitchID: OrderDirection
  twitchUsername: OrderDirection
  isAdmin: OrderDirection
  isOnline: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  slug: String
  ytID: String
  twitchID: String
  twitchUsername: String
  ytVideosID: JSON
  image: ImageFieldInput
  isAdmin: Boolean
  isOnline: Boolean
  password: String
  blogs: BlogRelateToManyForUpdateInput
  builds: BuildRelateToManyForUpdateInput
}

input BlogRelateToManyForUpdateInput {
  disconnect: [BlogWhereUniqueInput!]
  set: [BlogWhereUniqueInput!]
  create: [BlogCreateInput!]
  connect: [BlogWhereUniqueInput!]
}

input BuildRelateToManyForUpdateInput {
  disconnect: [BuildWhereUniqueInput!]
  set: [BuildWhereUniqueInput!]
  create: [BuildCreateInput!]
  connect: [BuildWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  slug: String
  ytID: String
  twitchID: String
  twitchUsername: String
  ytVideosID: JSON
  image: ImageFieldInput
  isAdmin: Boolean
  isOnline: Boolean
  password: String
  blogs: BlogRelateToManyForCreateInput
  builds: BuildRelateToManyForCreateInput
}

input BlogRelateToManyForCreateInput {
  create: [BlogCreateInput!]
  connect: [BlogWhereUniqueInput!]
}

input BuildRelateToManyForCreateInput {
  create: [BuildCreateInput!]
  connect: [BuildWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  color: String
  blogs(
    where: BlogWhereInput! = {}
    orderBy: [BlogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Blog!]
  blogsCount(where: BlogWhereInput! = {}): Int
  builds(
    where: BuildWhereInput! = {}
    orderBy: [BuildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Build!]
  buildsCount(where: BuildWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  color: StringFilter
  blogs: BlogManyRelationFilter
  builds: BuildManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  color: OrderDirection
}

input TagUpdateInput {
  name: String
  color: String
  blogs: BlogRelateToManyForUpdateInput
  builds: BuildRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  color: String
  blogs: BlogRelateToManyForCreateInput
  builds: BuildRelateToManyForCreateInput
}

type Class {
  id: ID!
  name: String
  image: ImageFieldOutput
  builds(
    where: BuildWhereInput! = {}
    orderBy: [BuildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Build!]
  buildsCount(where: BuildWhereInput! = {}): Int
}

input ClassWhereUniqueInput {
  id: ID
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  name: StringFilter
  builds: BuildManyRelationFilter
}

input ClassOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ClassUpdateInput {
  name: String
  image: ImageFieldInput
  builds: BuildRelateToManyForUpdateInput
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  name: String
  image: ImageFieldInput
  builds: BuildRelateToManyForCreateInput
}

type PostCategory {
  id: ID!
  name: String
  icon: String
  subtitle: String
  status: String
  content(
    where: PostContentWhereInput! = {}
    orderBy: [PostContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostContent!]
  contentCount(where: PostContentWhereInput! = {}): Int
}

input PostCategoryWhereUniqueInput {
  id: ID
}

input PostCategoryWhereInput {
  AND: [PostCategoryWhereInput!]
  OR: [PostCategoryWhereInput!]
  NOT: [PostCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  icon: StringFilter
  subtitle: StringFilter
  status: StringNullableFilter
  content: PostContentManyRelationFilter
}

input PostContentManyRelationFilter {
  every: PostContentWhereInput
  some: PostContentWhereInput
  none: PostContentWhereInput
}

input PostCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  icon: OrderDirection
  subtitle: OrderDirection
  status: OrderDirection
}

input PostCategoryUpdateInput {
  name: String
  icon: String
  subtitle: String
  status: String
  content: PostContentRelateToManyForUpdateInput
}

input PostContentRelateToManyForUpdateInput {
  disconnect: [PostContentWhereUniqueInput!]
  set: [PostContentWhereUniqueInput!]
  create: [PostContentCreateInput!]
  connect: [PostContentWhereUniqueInput!]
}

input PostCategoryUpdateArgs {
  where: PostCategoryWhereUniqueInput!
  data: PostCategoryUpdateInput!
}

input PostCategoryCreateInput {
  name: String
  icon: String
  subtitle: String
  status: String
  content: PostContentRelateToManyForCreateInput
}

input PostContentRelateToManyForCreateInput {
  create: [PostContentCreateInput!]
  connect: [PostContentWhereUniqueInput!]
}

type PostContent {
  id: ID!
  name: String
  status: String
  content: PostContent_content_Document
  category: PostCategory
}

type PostContent_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostContentWhereUniqueInput {
  id: ID
}

input PostContentWhereInput {
  AND: [PostContentWhereInput!]
  OR: [PostContentWhereInput!]
  NOT: [PostContentWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  category: PostCategoryWhereInput
}

input PostContentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
}

input PostContentUpdateInput {
  name: String
  status: String
  content: JSON
  category: PostCategoryRelateToOneForUpdateInput
}

input PostCategoryRelateToOneForUpdateInput {
  create: PostCategoryCreateInput
  connect: PostCategoryWhereUniqueInput
  disconnect: Boolean
}

input PostContentUpdateArgs {
  where: PostContentWhereUniqueInput!
  data: PostContentUpdateInput!
}

input PostContentCreateInput {
  name: String
  status: String
  content: JSON
  category: PostCategoryRelateToOneForCreateInput
}

input PostCategoryRelateToOneForCreateInput {
  create: PostCategoryCreateInput
  connect: PostCategoryWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createBlog(data: BlogCreateInput!): Blog
  createBlogs(data: [BlogCreateInput!]!): [Blog]
  updateBlog(where: BlogWhereUniqueInput!, data: BlogUpdateInput!): Blog
  updateBlogs(data: [BlogUpdateArgs!]!): [Blog]
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteBlogs(where: [BlogWhereUniqueInput!]!): [Blog]
  createBuild(data: BuildCreateInput!): Build
  createBuilds(data: [BuildCreateInput!]!): [Build]
  updateBuild(where: BuildWhereUniqueInput!, data: BuildUpdateInput!): Build
  updateBuilds(data: [BuildUpdateArgs!]!): [Build]
  deleteBuild(where: BuildWhereUniqueInput!): Build
  deleteBuilds(where: [BuildWhereUniqueInput!]!): [Build]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createPostCategory(data: PostCategoryCreateInput!): PostCategory
  createPostCategories(data: [PostCategoryCreateInput!]!): [PostCategory]
  updatePostCategory(
    where: PostCategoryWhereUniqueInput!
    data: PostCategoryUpdateInput!
  ): PostCategory
  updatePostCategories(data: [PostCategoryUpdateArgs!]!): [PostCategory]
  deletePostCategory(where: PostCategoryWhereUniqueInput!): PostCategory
  deletePostCategories(where: [PostCategoryWhereUniqueInput!]!): [PostCategory]
  createPostContent(data: PostContentCreateInput!): PostContent
  createPostContents(data: [PostContentCreateInput!]!): [PostContent]
  updatePostContent(
    where: PostContentWhereUniqueInput!
    data: PostContentUpdateInput!
  ): PostContent
  updatePostContents(data: [PostContentUpdateArgs!]!): [PostContent]
  deletePostContent(where: PostContentWhereUniqueInput!): PostContent
  deletePostContents(where: [PostContentWhereUniqueInput!]!): [PostContent]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  blogs(
    where: BlogWhereInput! = {}
    orderBy: [BlogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Blog!]
  blog(where: BlogWhereUniqueInput!): Blog
  blogsCount(where: BlogWhereInput! = {}): Int
  builds(
    where: BuildWhereInput! = {}
    orderBy: [BuildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Build!]
  build(where: BuildWhereUniqueInput!): Build
  buildsCount(where: BuildWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  classes(
    where: ClassWhereInput! = {}
    orderBy: [ClassOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Class!]
  class(where: ClassWhereUniqueInput!): Class
  classesCount(where: ClassWhereInput! = {}): Int
  postCategories(
    where: PostCategoryWhereInput! = {}
    orderBy: [PostCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostCategory!]
  postCategory(where: PostCategoryWhereUniqueInput!): PostCategory
  postCategoriesCount(where: PostCategoryWhereInput! = {}): Int
  postContents(
    where: PostContentWhereInput! = {}
    orderBy: [PostContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostContent!]
  postContent(where: PostContentWhereUniqueInput!): PostContent
  postContentsCount(where: PostContentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
